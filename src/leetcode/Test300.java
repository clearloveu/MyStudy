package leetcode;

/**
 * @author zg
 * @create 2020-02-04 14:08
 *
 * 最长上升子序列[中等]                [未完成]
 *
 * 给定一个无序的整数数组，找到其中最长上升子序列的长度。
 *
 * 示例:
 * 输入: [10,9,2,5,3,7,101,18]
 * 输出: 4
 * 解释: 最长的上升子序列是 [2,3,7,101]，它的长度是 4。
 *
 * 说明:
 * 	可能会有多种最长上升子序列的组合，你只需要输出对应的长度即可。
 * 	你算法的时间复杂度应该为 O(n^2)
 *
 *
 * 进阶: 你能将算法的时间复杂度降低到 O(n log n) 吗?
 *
 */
public class Test300 {
    //动态规划
//    复杂度分析
//    时间复杂度O(n^2)。有两个n 的循环。
//    空间复杂度：O(n)，用了大小为n 的矩阵 dq。
    private int lengthOfLIS(int[] nums) {
        //dq数组，dq[i]表示包含第i个元素的前i个元素的最长上升子序列的长度
        //例如：[5,6,2,1,7,9,2]  =====>   dq:[1,2,1,1,3,4,2]
        //状态转移方程：
        // dq[i] = 1;
        // for j in [0, i){
        //    dp[i] = max(dp[i], dp[j] + 1) ;
        // }
        int[] dq = new int[nums.length];
        for(int i = 0;i<nums.length;i++){
            dq[i] = 1;         //以该元素结尾的最长上升子序列的最短长度是1，为该元素本身
            for(int j= 0;j<i;j++) {
                if (nums[i] > nums[j]){               //如果前面某一个元素j比该元素小
                    int temp = dq[j] + 1;             //则该元素可以加入以j为结尾的最长上升子序列的最后
                    dq[i] = Math.max(dq[i], temp);    //比较前面所有出现上述情况的子序列，保留最长长度
                }
            }
        }
        //找到dq数组中的最大值，即最长上升子序列的长度
        int max = 0;
        for(int i =0;i<nums.length;i++){
            max = Math.max(max,dq[i]);
        }
        return max;
    }

    //动态规划+二分搜索（？）
//    复杂度分析
//    时间复杂度：O(nlogn)。二分搜索需要花费 nlogn 的时间且调用 n次。
//    空间复杂度：O(n)，用了大小为 n的矩阵 dq。

}
